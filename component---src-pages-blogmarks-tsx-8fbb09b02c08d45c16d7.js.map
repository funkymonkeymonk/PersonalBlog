{"version":3,"sources":["webpack:///./src/components/BlogmarksTitle.tsx","webpack:///./src/pages/blogmarks.tsx"],"names":["Segment","vertical","Header","as","Icon","name","Content","Subheader","pageQuery","withLayout","props","data","tags","group","blogmarks","posts","edges","Blogmarks","location","pathname","Math","ceil","totalCount","Container","map","node","frontmatter","extra","timeToRead","fields","slug","excerpt","author","avatar","children","get","Comment","Group","Metadata","style","margin","updatedDate","Card","key","title","fluid","href","link","meta","header","BlogmarksTitle","Grid","padded","justifyContent","maxWidth"],"mappings":"mPAGe,aACb,OACE,gBAACA,EAAA,EAAD,CAASC,UAAQ,GACf,gBAACC,EAAA,EAAD,CAAQC,GAAG,MACT,gBAACC,EAAA,EAAD,CAAMC,KAAK,aACX,gBAACH,EAAA,EAAOI,QAAR,iBAEI,gBAACJ,EAAA,EAAOK,UAAR,kE,wBCsFCC,GAFEC,uBAxEO,SAACC,GACRA,EAAMC,KAAKC,KAAKC,MAA7B,IACMC,EAAYJ,EAAMC,KAAKI,MAAMC,MAK7BC,GAJeP,EAAMQ,SAAnBC,SACUC,KAAKC,KAAKX,EAAMC,KAAKI,MAAMO,WAAa,IAIxD,gBAACC,EAAA,EAAD,KACGT,EAAUU,KAAI,YAAsC,IAAnCC,EAAmC,EAAnCA,KACRC,EAAuDD,EAAvDC,YAIFC,GAJyDF,EAA1CG,WAA0CH,EAA9BI,OAAUC,KAAoBL,EAAZM,QACpCL,EAAYM,OAAOC,OAAOC,SAAS,GACpCC,cAAIT,EAAa,yBAA0B,IAGvD,gBAACU,EAAA,EAAQC,MAAT,KACE,gBAACD,EAAA,EAAD,KAKE,gBAACA,EAAA,EAAQ9B,QAAT,KAIE,gBAAC8B,EAAA,EAAQE,SAAT,CAAkBC,MAAO,CAAEC,OAAQ,IAAnC,UACUd,EAAYe,YADtB,SAUR,OACE,gBAACC,EAAA,EAAD,CAAMC,IAAKjB,EAAYkB,MACrBC,OAAK,EAELC,KAAMpB,EAAYqB,KAClBC,KAAMtB,EAAYqB,KAClBE,OAAQvB,EAAYkB,MACpBjB,MAAOA,SAOjB,OACE,gBAACJ,EAAA,EAAD,KAEE,gBAAC2B,EAAD,MAGA,gBAAClD,EAAA,EAAD,CAASC,UAAQ,GACf,gBAACkD,EAAA,EAAD,CAAMC,QAAM,EAACb,MAAO,CAAEc,eAAgB,iBACpC,uBAAKd,MAAO,CAAEe,SAAU,MACrBrC,SAgBY","file":"component---src-pages-blogmarks-tsx-8fbb09b02c08d45c16d7.js","sourcesContent":["import * as React from \"react\";\nimport { Header, Segment, Icon } from \"semantic-ui-react\";\n\nexport default () => {\n  return (\n    <Segment vertical>\n      <Header as=\"h2\">\n        <Icon name=\"bookmark\" />\n        <Header.Content>\n          Blogmarks\n            <Header.Subheader>\n            Interesting links and possibly interesting commentary\n            </Header.Subheader>\n        </Header.Content>\n      </Header>\n    </Segment>\n  );\n};\n","import * as React from \"react\";\nimport { Link } from \"gatsby\";\nimport { StaticQuery, graphql } from \"gatsby\";\nimport { Header, Grid, Card, List, Container, Feed, Segment, Comment } from \"semantic-ui-react\";\nimport { MarkdownRemarkConnection, ImageSharp } from \"../graphql-types\";\nimport BlogmarksTitle from \"../components/BlogmarksTitle\";\nimport TagsCard from \"../components/TagsCard/TagsCard\";\nimport BlogPagination from \"../components/BlogPagination/BlogPagination\";\nimport { get } from \"lodash\";\nimport {withLayout, LayoutProps} from \"../components/Layout\";\nimport { MarkdownRemark } from \"../graphql-types\";\n\ninterface BlogmarksProps extends LayoutProps {\n  data: {\n    tags: MarkdownRemarkConnection;\n    posts: MarkdownRemarkConnection;\n  };\n  pageContext: {\n    tag?: string; // only set into `templates/tags-pages.tsx`\n  };\n}\n\nconst BlogmarksPage = (props: BlogmarksProps) => {\n  const tags = props.data.tags.group;\n  const blogmarks = props.data.posts.edges;\n  const { pathname } = props.location;\n  const pageCount = Math.ceil(props.data.posts.totalCount / 10);\n\n  // TODO export posts in a proper component\n  const Blogmarks = (\n    <Container>\n      {blogmarks.map(({ node }: {node: MarkdownRemark}) => {\n        const { frontmatter, timeToRead, fields: { slug }, excerpt } = node;\n        const avatar = frontmatter.author.avatar.children[0] as ImageSharp;\n        const cover = get(frontmatter, \"image.children.0.fixed\", {});\n\n        const extra = (\n          <Comment.Group>\n            <Comment>\n              {/* <Comment.Avatar\n                src={avatar.fixed.src}\n                srcSet={avatar.fixed.srcSet}\n              /> */}\n              <Comment.Content>\n                {/* <Comment.Author style={{ fontWeight: 400 }}>\n                  Submitted by: {frontmatter.author.id}\n                </Comment.Author> */}\n                <Comment.Metadata style={{ margin: 0 }}>\n                  Added: {frontmatter.updatedDate} {/*- {timeToRead} min read */}\n                </Comment.Metadata>\n              </Comment.Content>\n            </Comment>\n          </Comment.Group>\n        );\n\n        // TODO: Implement discussions akin to reddit\n\n        return (\n          <Card key={frontmatter.title}\n            fluid\n            // image={cover}\n            href={frontmatter.link}\n            meta={frontmatter.link}\n            header={frontmatter.title}\n            extra={extra}\n          />\n        );\n      })}\n    </Container>\n  );\n\n  return (\n    <Container>\n      {/* Title */}\n      <BlogmarksTitle />\n\n      {/* Content */}\n      <Segment vertical>\n        <Grid padded style={{ justifyContent: \"space-around\" }}>\n          <div style={{ maxWidth: 600 }}>\n            {Blogmarks}\n            {/* <Segment vertical textAlign=\"center\">\n              <BlogPagination Link={Link} pathname={pathname} pageCount={pageCount} />\n            </Segment> */}\n          </div>\n          {/* <div>\n            <TagsCard Link={Link} tags={tags} tag={props.pageContext.tag} />\n          </div> */}\n        </Grid>\n      </Segment>\n    </Container>\n  );\n};\n\nexport default withLayout(BlogmarksPage);\n\nexport const pageQuery = graphql`\nquery PageBlogmarks {\n  # Get tags\n  tags: allMarkdownRemark {\n    group(field: frontmatter___tags) {\n      fieldValue\n      totalCount\n    }\n  }\n\n  # Get posts\n  posts: allMarkdownRemark(\n    sort: { order: DESC, fields: [frontmatter___updatedDate] },\n    filter: {\n      fileAbsolutePath: { regex: \"/blogmarks/\" }\n    },\n    limit: 10\n  ) {\n    totalCount\n    edges {\n      node {\n        excerpt\n        timeToRead\n        fields {\n          slug\n        }\n        frontmatter {\n          link\n          title\n          updatedDate(formatString: \"DD MMMM, YYYY\")\n          image {\n          \tchildren {\n              ... on ImageSharp {\n                fixed(width: 700, height: 100) {\n                  src\n                  srcSet\n                }\n              }\n            }\n          }\n          author {\n            id\n            avatar {\n              children {\n                ... on ImageSharp {\n                  fixed(width: 35, height: 35) {\n                    src\n                    srcSet\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n`;\n"],"sourceRoot":""}