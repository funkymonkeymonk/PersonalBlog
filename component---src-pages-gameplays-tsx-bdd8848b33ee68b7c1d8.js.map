{"version":3,"file":"component---src-pages-gameplays-tsx-bdd8848b33ee68b7c1d8.js","mappings":"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","sources":["webpack://willweaver.dev/./node_modules/semantic-ui-react/dist/es/views/Card/CardDescription.js","webpack://willweaver.dev/./node_modules/semantic-ui-react/dist/es/views/Card/CardHeader.js","webpack://willweaver.dev/./node_modules/semantic-ui-react/dist/es/views/Card/CardMeta.js","webpack://willweaver.dev/./node_modules/semantic-ui-react/dist/es/views/Card/CardContent.js","webpack://willweaver.dev/./node_modules/semantic-ui-react/dist/es/views/Card/CardGroup.js","webpack://willweaver.dev/./node_modules/semantic-ui-react/dist/es/views/Card/Card.js","webpack://willweaver.dev/./src/components/GameplaysTitle.tsx","webpack://willweaver.dev/./src/pages/gameplays.tsx"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _without from \"lodash-es/without\";\nimport cx from 'clsx';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, SUI, useTextAlignProp } from '../../lib';\n/**\n * A card can contain a description with one or more paragraphs.\n */\n\nfunction CardDescription(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content,\n      textAlign = props.textAlign;\n  var classes = cx(useTextAlignProp(textAlign), 'description', className);\n  var rest = getUnhandledProps(CardDescription, props);\n  var ElementType = getElementType(CardDescription, props);\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nCardDescription.handledProps = [\"as\", \"children\", \"className\", \"content\", \"textAlign\"];\nexport default CardDescription;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _without from \"lodash-es/without\";\nimport cx from 'clsx';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, SUI, useTextAlignProp } from '../../lib';\n/**\n * A card can contain a header.\n */\n\nfunction CardHeader(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content,\n      textAlign = props.textAlign;\n  var classes = cx(useTextAlignProp(textAlign), 'header', className);\n  var rest = getUnhandledProps(CardHeader, props);\n  var ElementType = getElementType(CardHeader, props);\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nCardHeader.handledProps = [\"as\", \"children\", \"className\", \"content\", \"textAlign\"];\nexport default CardHeader;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _without from \"lodash-es/without\";\nimport cx from 'clsx';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, SUI, useTextAlignProp } from '../../lib';\n/**\n * A card can contain content metadata.\n */\n\nfunction CardMeta(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content,\n      textAlign = props.textAlign;\n  var classes = cx(useTextAlignProp(textAlign), 'meta', className);\n  var rest = getUnhandledProps(CardMeta, props);\n  var ElementType = getElementType(CardMeta, props);\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nCardMeta.handledProps = [\"as\", \"children\", \"className\", \"content\", \"textAlign\"];\nexport default CardMeta;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _without from \"lodash-es/without\";\nimport cx from 'clsx';\nimport React from 'react';\nimport { childrenUtils, createShorthand, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useTextAlignProp } from '../../lib';\nimport CardDescription from './CardDescription';\nimport CardHeader from './CardHeader';\nimport CardMeta from './CardMeta';\n/**\n * A card can contain blocks of content or extra content meant to be formatted separately from the main content.\n */\n\nfunction CardContent(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content,\n      description = props.description,\n      extra = props.extra,\n      header = props.header,\n      meta = props.meta,\n      textAlign = props.textAlign;\n  var classes = cx(useKeyOnly(extra, 'extra'), useTextAlignProp(textAlign), 'content', className);\n  var rest = getUnhandledProps(CardContent, props);\n  var ElementType = getElementType(CardContent, props);\n\n  if (!childrenUtils.isNil(children)) {\n    return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), children);\n  }\n\n  if (!childrenUtils.isNil(content)) {\n    return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), content);\n  }\n\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), createShorthand(CardHeader, function (val) {\n    return {\n      content: val\n    };\n  }, header, {\n    autoGenerateKey: false\n  }), createShorthand(CardMeta, function (val) {\n    return {\n      content: val\n    };\n  }, meta, {\n    autoGenerateKey: false\n  }), createShorthand(CardDescription, function (val) {\n    return {\n      content: val\n    };\n  }, description, {\n    autoGenerateKey: false\n  }));\n}\n\nCardContent.handledProps = [\"as\", \"children\", \"className\", \"content\", \"description\", \"extra\", \"header\", \"meta\", \"textAlign\"];\nexport default CardContent;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _without from \"lodash-es/without\";\nimport _map from \"lodash-es/map\";\nimport cx from 'clsx';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useTextAlignProp, useWidthProp } from '../../lib';\nimport Card from './Card';\n/**\n * A group of cards.\n */\n\nfunction CardGroup(props) {\n  var centered = props.centered,\n      children = props.children,\n      className = props.className,\n      content = props.content,\n      doubling = props.doubling,\n      items = props.items,\n      itemsPerRow = props.itemsPerRow,\n      stackable = props.stackable,\n      textAlign = props.textAlign;\n  var classes = cx('ui', useKeyOnly(centered, 'centered'), useKeyOnly(doubling, 'doubling'), useKeyOnly(stackable, 'stackable'), useTextAlignProp(textAlign), useWidthProp(itemsPerRow), 'cards', className);\n  var rest = getUnhandledProps(CardGroup, props);\n  var ElementType = getElementType(CardGroup, props);\n\n  if (!childrenUtils.isNil(children)) {\n    return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), children);\n  }\n\n  if (!childrenUtils.isNil(content)) {\n    return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), content);\n  }\n\n  var itemsJSX = _map(items, function (item) {\n    var _item$key;\n\n    var key = (_item$key = item.key) != null ? _item$key : [item.header, item.description].join('-');\n    return /*#__PURE__*/React.createElement(Card, _extends({\n      key: key\n    }, item));\n  });\n\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), itemsJSX);\n}\n\nCardGroup.handledProps = [\"as\", \"centered\", \"children\", \"className\", \"content\", \"doubling\", \"items\", \"itemsPerRow\", \"stackable\", \"textAlign\"];\nexport default CardGroup;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport cx from 'clsx';\nimport React, { Component } from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly } from '../../lib';\nimport Image from '../../elements/Image';\nimport CardContent from './CardContent';\nimport CardDescription from './CardDescription';\nimport CardGroup from './CardGroup';\nimport CardHeader from './CardHeader';\nimport CardMeta from './CardMeta';\n/**\n * A card displays site content in a manner similar to a playing card.\n */\n\nvar Card = /*#__PURE__*/function (_Component) {\n  _inheritsLoose(Card, _Component);\n\n  function Card() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _Component.call.apply(_Component, [this].concat(args)) || this;\n\n    _this.handleClick = function (e) {\n      var onClick = _this.props.onClick;\n      if (onClick) onClick(e, _this.props);\n    };\n\n    return _this;\n  }\n\n  var _proto = Card.prototype;\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        centered = _this$props.centered,\n        children = _this$props.children,\n        className = _this$props.className,\n        color = _this$props.color,\n        content = _this$props.content,\n        description = _this$props.description,\n        extra = _this$props.extra,\n        fluid = _this$props.fluid,\n        header = _this$props.header,\n        href = _this$props.href,\n        image = _this$props.image,\n        link = _this$props.link,\n        meta = _this$props.meta,\n        onClick = _this$props.onClick,\n        raised = _this$props.raised;\n    var classes = cx('ui', color, useKeyOnly(centered, 'centered'), useKeyOnly(fluid, 'fluid'), useKeyOnly(link, 'link'), useKeyOnly(raised, 'raised'), 'card', className);\n    var rest = getUnhandledProps(Card, this.props);\n    var ElementType = getElementType(Card, this.props, function () {\n      if (onClick) return 'a';\n    });\n\n    if (!childrenUtils.isNil(children)) {\n      return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n        className: classes,\n        href: href,\n        onClick: this.handleClick\n      }), children);\n    }\n\n    if (!childrenUtils.isNil(content)) {\n      return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n        className: classes,\n        href: href,\n        onClick: this.handleClick\n      }), content);\n    }\n\n    return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n      className: classes,\n      href: href,\n      onClick: this.handleClick\n    }), Image.create(image, {\n      autoGenerateKey: false,\n      defaultProps: {\n        ui: false,\n        wrapped: true\n      }\n    }), (description || header || meta) && /*#__PURE__*/React.createElement(CardContent, {\n      description: description,\n      header: header,\n      meta: meta\n    }), extra && /*#__PURE__*/React.createElement(CardContent, {\n      extra: true\n    }, extra));\n  };\n\n  return Card;\n}(Component);\n\nCard.handledProps = [\"as\", \"centered\", \"children\", \"className\", \"color\", \"content\", \"description\", \"extra\", \"fluid\", \"header\", \"href\", \"image\", \"link\", \"meta\", \"onClick\", \"raised\"];\nexport { Card as default };\nCard.Content = CardContent;\nCard.Description = CardDescription;\nCard.Group = CardGroup;\nCard.Header = CardHeader;\nCard.Meta = CardMeta;","import * as React from \"react\";\nimport { Header, Segment, Icon } from \"semantic-ui-react\";\n\nexport default () => {\n  return (\n    <Segment vertical>\n      <Header as=\"h2\">\n        <Icon name=\"chess pawn\" />\n        <Header.Content>\n          Gameplays\n          <Header.Subheader>\n            I really enjoy games of all types. Here is some of my recent game experiences.\n          </Header.Subheader>\n        </Header.Content>\n      </Header>\n    </Segment>\n  );\n};\n","import * as React from \"react\";\nimport { graphql } from \"gatsby\";\nimport { Grid, Card, Container, Segment } from \"semantic-ui-react\";\nimport { MarkdownRemarkConnection } from \"../graphql-types\";\nimport {withLayout, LayoutProps} from \"../components/Layout\";\nimport GameplaysTitle from \"../components/GameplaysTitle\";\n\ninterface GameplaysProps extends LayoutProps {\n  data: {\n    tags: MarkdownRemarkConnection;\n    posts: MarkdownRemarkConnection;\n  };\n  pageContext: {\n    tag?: string; // only set into `templates/tags-pages.tsx`\n  };\n}\n\nconst GameplaysPage = (props: GameplaysProps) => {\n  // const tags = props.data.tags.group;\n  const plays = props.data.allGoogleGameplaysSheet.edges;\n  // const { pathname } = props.location;\n  // const pageCount = Math.ceil(props.data.posts.totalCount / 10);\n\n  const Blogmarks = (\n    <Container>\n      {plays.map(({ node }) => {\n        const { id, whatGame, date, outcome, otherData, scenario } = node;\n        let cardHeader: string;\n        if (scenario) {\n          cardHeader = whatGame + \" - \" + scenario;\n        } else {\n          cardHeader = whatGame;\n        }\n\n        return (\n          <Card key={id}\n                fluid\n            // image={cover}\n                meta={outcome}\n                header={cardHeader}\n                description={otherData}\n                extra={date}\n          />\n        );\n      })}\n    </Container>\n  );\n\n  return (\n    <Container>\n      {/* Title */}\n      <GameplaysTitle />\n\n      {/* Content */}\n      <Segment vertical>\n        <Grid padded style={{ justifyContent: \"space-around\" }}>\n          <div style={{ maxWidth: 600 }}>\n            {Blogmarks}\n            {/* <Segment vertical textAlign=\"center\">\n              <BlogPagination Link={Link} pathname={pathname} pageCount={pageCount} />\n            </Segment> */}\n          </div>\n          {/* <div>\n            <TagsCard Link={Link} tags={tags} tag={props.pageContext.tag} />\n          </div> */}\n        </Grid>\n      </Segment>\n    </Container>\n  );\n};\n\nexport default withLayout(GameplaysPage);\n\nexport const pageQuery = graphql`\nquery PageGameplays {\n  allGoogleGameplaysSheet {\n    totalCount,\n    edges {\n      node {\n        id, whatGame, date, timestamp, outcome, otherData, scenario\n      }\n    }\n  }\n}\n`;\n"],"names":["CardDescription","props","children","className","content","textAlign","classes","rest","getUnhandledProps","ElementType","getElementType","childrenUtils","handledProps","CardHeader","CardMeta","CardContent","description","extra","header","meta","val","autoGenerateKey","CardGroup","centered","doubling","items","itemsPerRow","stackable","itemsJSX","item","_item$key","key","join","Card","_Component","_this","_len","arguments","length","args","Array","_key","call","apply","this","concat","handleClick","e","onClick","prototype","render","_this$props","color","fluid","href","image","link","raised","Image","defaultProps","ui","wrapped","Component","Content","Description","Group","Header","Meta","Segment","vertical","as","Icon","name","withLayout","plays","data","allGoogleGameplaysSheet","edges","Blogmarks","Container","map","cardHeader","node","id","whatGame","date","outcome","otherData","scenario","GameplaysTitle","Grid","padded","style","justifyContent","maxWidth"],"sourceRoot":""}