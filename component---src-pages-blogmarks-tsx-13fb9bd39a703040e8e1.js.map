{"version":3,"sources":["webpack:///./src/components/BlogmarksTitle.tsx","webpack:///./src/components/Blogmark.tsx","webpack:///./src/pages/blogmarks.tsx"],"names":["Segment","vertical","Header","as","Icon","name","Content","Subheader","props","Card","key","slug","fluid","image","cover","header","frontmatter","title","extra","description","withLayout","data","tags","group","posts","edges","Posts","location","pathname","Math","ceil","totalCount","Container","map","node","timeToRead","fields","excerpt","avatar","author","children","get","Comment","Group","Avatar","src","fixed","srcSet","Author","style","fontWeight","id","Metadata","margin","updatedDate","Description","to","Blogmark","BlogmarksTitle","Grid","padded","justifyContent","maxWidth","pageQuery"],"mappings":"uOAGe,aACb,OACE,gBAACA,EAAA,EAAD,CAASC,UAAQ,GACf,gBAACC,EAAA,EAAD,CAAQC,GAAG,MACT,gBAACC,EAAA,EAAD,CAAMC,KAAK,aACX,gBAACH,EAAA,EAAOI,QAAR,iBAEI,gBAACJ,EAAA,EAAOK,UAAR,kECkDG,WAACC,GACZ,OACI,kBAACC,EAAA,EAAD,CAAMC,IAAKF,EAAMG,KACbC,OAAK,EACLC,MAAOL,EAAMM,MACbC,OAAQP,EAAMQ,YAAYC,MAC1BC,MAAOV,EAAMU,MACbC,YAAaX,EAAMW,e,kECyChBC,uBArFO,SAACZ,GACRA,EAAMa,KAAKC,KAAKC,MAA7B,IACMC,EAAQhB,EAAMa,KAAKG,MAAMC,MAKzBC,GAJelB,EAAMmB,SAAnBC,SACUC,KAAKC,KAAKtB,EAAMa,KAAKG,MAAMO,WAAa,IAIxD,gBAACC,EAAA,EAAD,KACGR,EAAMS,KAAI,YAAsC,IAAnCC,EAAmC,EAAnCA,KACJlB,EAAuDkB,EAAvDlB,YAAamB,EAA0CD,EAA1CC,WAAsBxB,EAAoBuB,EAA9BE,OAAUzB,KAAQ0B,EAAYH,EAAZG,QAC7CC,EAAStB,EAAYuB,OAAOD,OAAOE,SAAS,GACpCC,cAAIzB,EAAa,yBAA0B,IAGvD,gBAAC0B,EAAA,EAAQC,MAAT,KACE,gBAACD,EAAA,EAAD,KACE,gBAACA,EAAA,EAAQE,OAAT,CACEC,IAAKP,EAAOQ,MAAMD,IAClBE,OAAQT,EAAOQ,MAAMC,SAEvB,gBAACL,EAAA,EAAQpC,QAAT,KACE,gBAACoC,EAAA,EAAQM,OAAT,CAAgBC,MAAO,CAAEC,WAAY,MAArC,iBACiBlC,EAAYuB,OAAOY,IAEpC,gBAACT,EAAA,EAAQU,SAAT,CAAkBH,MAAO,CAAEI,OAAQ,IAChCrC,EAAYsC,YADf,MAC+BnB,EAD/B,gBASN,gBAAC1B,EAAA,EAAK8C,YAAN,KACGlB,EACD,2BACA,gBAAC,OAAD,CAAMmB,GAAI7C,GAAV,eAIJ,OASE,gBAAC8C,EAAD,CACE9C,MAAI,EACJG,OAAK,EACLE,aAAW,EACXE,OAAK,EACLC,aAAW,SAOrB,OACE,gBAACa,EAAA,EAAD,KAEE,gBAAC0B,EAAD,MAGA,gBAAC1D,EAAA,EAAD,CAASC,UAAQ,GACf,gBAAC0D,EAAA,EAAD,CAAMC,QAAM,EAACX,MAAO,CAAEY,eAAgB,iBACpC,uBAAKZ,MAAO,CAAEa,SAAU,MACrBpC,SAvEb,IAuFaqC,EAAY","file":"component---src-pages-blogmarks-tsx-13fb9bd39a703040e8e1.js","sourcesContent":["import * as React from \"react\";\nimport { Header, Segment, Icon } from \"semantic-ui-react\";\n\nexport default () => {\n  return (\n    <Segment vertical>\n      <Header as=\"h2\">\n        <Icon name=\"bookmark\" />\n        <Header.Content>\n          Blogmarks\n            <Header.Subheader>\n            Interesting links and possibly interesting commentary\n            </Header.Subheader>\n        </Header.Content>\n      </Header>\n    </Segment>\n  );\n};\n","import { Container, Card } from \"semantic-ui-react\";\nimport React from \"react\";\nimport { MarkdownRemark, ImageSharp } from \"../graphql-types\";\nimport { get } from \"lodash\";\n\ninterface BlogmarksProps {\n    slug: any\n    cover: any\n    frontmatter: any\n    extra: any\n    description: any\n}\n\n// const Posts = (\n//     <Container>\n//       {posts.map(({ node }: {node: MarkdownRemark}) => {\n//         const { frontmatter, timeToRead, fields: { slug }, excerpt } = node;\n//         const avatar = frontmatter.author.avatar.children[0] as ImageSharp;\n//         const cover = get(frontmatter, \"image.children.0.fixed\", {});\n\n//         const extra = (\n//           <Comment.Group>\n//             <Comment>\n//               <Comment.Avatar\n//                 src={avatar.fixed.src}\n//                 srcSet={avatar.fixed.srcSet}\n//               />\n//               <Comment.Content>\n//                 <Comment.Author style={{ fontWeight: 400 }}>\n//                   Submitted by: {frontmatter.author.id}\n//                 </Comment.Author>\n//                 <Comment.Metadata style={{ margin: 0 }}>\n//                   {frontmatter.updatedDate} - {timeToRead} min read\n//                 </Comment.Metadata>\n//               </Comment.Content>\n//             </Comment>\n//           </Comment.Group>\n//         );\n\n//         const description = (\n//           <Card.Description>\n//             {excerpt}\n//             <br />\n//             <Link to={slug}>Read more…</Link>\n//           </Card.Description>\n//         );\n\n//         return (\n//           <Card key={slug}\n//             fluid\n//             image={cover}\n//             header={frontmatter.title}\n//             extra={extra}\n//             description={description}\n//           />\n//         );\n//       })}\n//     </Container>\n//   );\n\nexport default (props: BlogmarksProps) => {\n    return (\n        <Card key={props.slug}\n            fluid\n            image={props.cover}\n            header={props.frontmatter.title}\n            extra={props.extra}\n            description={props.description}\n        />\n    );\n}","import * as React from \"react\";\nimport { Link } from \"gatsby\";\nimport { StaticQuery, graphql } from \"gatsby\";\nimport { Header, Grid, Card, List, Container, Feed, Segment, Comment } from \"semantic-ui-react\";\nimport { MarkdownRemarkConnection, ImageSharp } from \"../graphql-types\";\nimport BlogmarksTitle from \"../components/BlogmarksTitle\";\nimport Blogmark from \"../components/Blogmark\";\nimport TagsCard from \"../components/TagsCard/TagsCard\";\nimport BlogPagination from \"../components/BlogPagination/BlogPagination\";\nimport { get } from \"lodash\";\nimport {withLayout, LayoutProps} from \"../components/Layout\";\nimport { MarkdownRemark } from \"../graphql-types\";\n\ninterface BlogmarksProps extends LayoutProps {\n  data: {\n    tags: MarkdownRemarkConnection;\n    posts: MarkdownRemarkConnection;\n  };\n  pageContext: {\n    tag?: string; // only set into `templates/tags-pages.tsx`\n  };\n}\n\nconst BlogmarksPage = (props: BlogmarksProps) => {\n  const tags = props.data.tags.group;\n  const posts = props.data.posts.edges;\n  const { pathname } = props.location;\n  const pageCount = Math.ceil(props.data.posts.totalCount / 10);\n\n  // TODO export posts in a proper component\n  const Posts = (\n    <Container>\n      {posts.map(({ node }: {node: MarkdownRemark}) => {\n        const { frontmatter, timeToRead, fields: { slug }, excerpt } = node;\n        const avatar = frontmatter.author.avatar.children[0] as ImageSharp;\n        const cover = get(frontmatter, \"image.children.0.fixed\", {});\n\n        const extra = (\n          <Comment.Group>\n            <Comment>\n              <Comment.Avatar\n                src={avatar.fixed.src}\n                srcSet={avatar.fixed.srcSet}\n              />\n              <Comment.Content>\n                <Comment.Author style={{ fontWeight: 400 }}>\n                  Submitted by: {frontmatter.author.id}\n                </Comment.Author>\n                <Comment.Metadata style={{ margin: 0 }}>\n                  {frontmatter.updatedDate} - {timeToRead} min read\n                </Comment.Metadata>\n              </Comment.Content>\n            </Comment>\n          </Comment.Group>\n        );\n\n        const description = (\n          <Card.Description>\n            {excerpt}\n            <br />\n            <Link to={slug}>Read more…</Link>\n          </Card.Description>\n        );\n\n        return (\n          // <Card key={slug}\n          //   fluid\n          //   image={cover}\n          //   header={frontmatter.title}\n          //   extra={extra}\n          //   description={description}\n          // />\n\n          <Blogmark\n            slug\n            cover\n            frontmatter\n            extra\n            description\n          />\n        );\n      })}\n    </Container>\n  );\n\n  return (\n    <Container>\n      {/* Title */}\n      <BlogmarksTitle />\n\n      {/* Content */}\n      <Segment vertical>\n        <Grid padded style={{ justifyContent: \"space-around\" }}>\n          <div style={{ maxWidth: 600 }}>\n            {Posts}\n            {/* <Segment vertical textAlign=\"center\">\n              <BlogPagination Link={Link} pathname={pathname} pageCount={pageCount} />\n            </Segment> */}\n          </div>\n          {/* <div>\n            <TagsCard Link={Link} tags={tags} tag={props.pageContext.tag} />\n          </div> */}\n        </Grid>\n      </Segment>\n    </Container>\n  );\n};\n\nexport default withLayout(BlogmarksPage);\n\nexport const pageQuery = graphql`\nquery PageBlogmarks {\n  # Get tags\n  tags: allMarkdownRemark {\n    group(field: frontmatter___tags) {\n      fieldValue\n      totalCount\n    }\n  }\n\n  # Get posts\n  posts: allMarkdownRemark(\n    sort: { order: DESC, fields: [frontmatter___updatedDate] },\n    filter: {\n      fileAbsolutePath: { regex: \"/blogmarks/\" }\n    },\n    limit: 10\n  ) {\n    totalCount\n    edges {\n      node {\n        excerpt\n        timeToRead\n        fields {\n          slug\n        }\n        frontmatter {\n          link\n          title\n          updatedDate(formatString: \"DD MMMM, YYYY\")\n          image {\n          \tchildren {\n              ... on ImageSharp {\n                fixed(width: 700, height: 100) {\n                  src\n                  srcSet\n                }\n              }\n            }\n          }\n          author {\n            id\n            avatar {\n              children {\n                ... on ImageSharp {\n                  fixed(width: 35, height: 35) {\n                    src\n                    srcSet\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n`;\n"],"sourceRoot":""}